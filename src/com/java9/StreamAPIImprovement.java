package com.java9;

import java.util.Arrays;
import java.util.stream.Stream;

/*
Java 9 improvements in Stream API:
takeWhile(Predicate Interface)-->method takes all the values until the predicate returns false. It returns,
                                 in case of ordered stream, a stream consisting of the longest prefix of elements
                                 taken from this stream matching the given predicate.
dropWhile(Predicate Interface opposite of takeWhile)-->method takes all the values until the predicate returns false.
                                 It returns, in case of ordered stream, a stream consisting of the longest suffix
                                 of elements taken from this stream matching the given predicate.
iterate()--->method returns an infinite stream of values generated by a given function, until the Predicate hasNext returns false.
ofNullable()--->method lets you create a single-element stream that wraps a value if not null, or is an empty stream otherwise.
*/
public class StreamAPIImprovement {
    public static void main(String[] args) {
        Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10).stream()
                .takeWhile(i -> i < 5).forEach(System.out::println);
        System.out.println("-------------------------------------------------------");
        Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10).stream()
                .dropWhile(i -> i < 5).forEach(System.out::println);
        System.out.println("-------------------------------------------------------");
        Stream<Integer> finiteStream = Stream.iterate(1, n -> n <= 10, n -> n + 1);
        finiteStream.forEach(System.out::println);
        System.out.println("-------------------------------------------------------");
        Stream.ofNullable(null).forEach(System.out::println);//Empty Stream
        Stream.ofNullable("Sudipta Sarkar").forEach(System.out::println);

    }
}
